// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eLibrary.Database.Models;

#nullable disable

namespace eLibrary.Migrations
{
    [DbContext(typeof(dbIB190096Context))]
    partial class dbIB190096ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Latin1_General_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eLibrary.Database.Models.Autor", b =>
                {
                    b.Property<int>("AutorId")
                        .HasColumnType("int")
                        .HasColumnName("AutorID");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.HasKey("AutorId")
                        .HasName("PK__Autor__F58AE909C6B597BE");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Autor");
                });

            modelBuilder.Entity("eLibrary.Database.Models.FajloviKnjige", b =>
                {
                    b.Property<int>("IdFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFile"));

                    b.Property<int?>("IdKnjiga")
                        .HasColumnType("int");

                    b.Property<string>("NazivFilea")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PathToFile")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdFile")
                        .HasName("PK__FajloviK__01E644E18C3C6F9A");

                    b.HasIndex("IdKnjiga");

                    b.ToTable("FajloviKnjige");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Kartica", b =>
                {
                    b.Property<int>("KarticaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KarticaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KarticaId"));

                    b.Property<string>("BrojKartice")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("char(16)")
                        .IsFixedLength();

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.HasKey("KarticaId")
                        .HasName("PK__Kartica__8B34B3E9772AE18C");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Kartica");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Knjiga", b =>
                {
                    b.Property<int>("IdKnjiga")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKnjiga"));

                    b.Property<int>("AutorId")
                        .HasColumnType("int")
                        .HasColumnName("AutorID");

                    b.Property<decimal?>("Cijena")
                        .HasColumnType("money");

                    b.Property<DateOnly>("DatumIzdavanja")
                        .HasColumnType("date");

                    b.Property<bool?>("Dostupnost")
                        .HasColumnType("bit");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<byte[]>("NaslovnaSlika")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Opis")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IdKnjiga");

                    b.HasIndex("AutorId");

                    b.ToTable("Knjiga");
                });

            modelBuilder.Entity("eLibrary.Database.Models.KnjigaKorisnik", b =>
                {
                    b.Property<int>("KnjigaKorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KnjigaKorisnikID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KnjigaKorisnikId"));

                    b.Property<int?>("KnjigaId")
                        .HasColumnType("int")
                        .HasColumnName("KnjigaID");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.HasKey("KnjigaKorisnikId")
                        .HasName("PK__KnjigaKo__20694ADD00A98B7C");

                    b.HasIndex("KnjigaId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("KnjigaKorisnik");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Komentari", b =>
                {
                    b.Property<int>("KomentarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KomentarID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KomentarId"));

                    b.Property<int?>("KnjigaId")
                        .HasColumnType("int")
                        .HasColumnName("KnjigaID");

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("VrijemeKomentara")
                        .HasColumnType("datetime");

                    b.HasKey("KomentarId")
                        .HasName("PK__Komentar__C0C304BCDCCCF195");

                    b.HasIndex("KnjigaId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Komentari");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Korisnik", b =>
                {
                    b.Property<int>("IdKorisnik")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdKorisnik"));

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Fotografija")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LozinkaHash")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LozinkaSalt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdKorisnik")
                        .HasName("PK__Korisnik__58FE570E47FC08DE");

                    b.HasIndex(new[] { "KorisnickoIme" }, "UQ__Korisnik__992E6F92044E7587")
                        .IsUnique();

                    b.ToTable("Korisnik");
                });

            modelBuilder.Entity("eLibrary.Database.Models.KorisnikMedalja", b =>
                {
                    b.Property<int>("KorisnikMedaljaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KorisnikMedaljaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorisnikMedaljaId"));

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<int?>("MedaljaId")
                        .HasColumnType("int")
                        .HasColumnName("MedaljaID");

                    b.HasKey("KorisnikMedaljaId")
                        .HasName("PK__Korisnik__14DBBC3D0204EBF6");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("MedaljaId");

                    b.ToTable("KorisnikMedalja");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Medalja", b =>
                {
                    b.Property<int>("MedaljaId")
                        .HasColumnType("int")
                        .HasColumnName("MedaljaID");

                    b.Property<string>("NazivMedalje")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("SlikaMedalje")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("MedaljaId");

                    b.ToTable("Medalja");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Notifikacije", b =>
                {
                    b.Property<int>("NotifikacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("NotifikacijaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotifikacijaId"));

                    b.Property<int?>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<string>("Poruka")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Procitana")
                        .HasColumnType("bit");

                    b.Property<int>("TipNotifikacijeId")
                        .HasColumnType("int")
                        .HasColumnName("TipNotifikacijeID");

                    b.Property<DateTime>("VrijemeNotifikacije")
                        .HasColumnType("datetime");

                    b.HasKey("NotifikacijaId")
                        .HasName("PK__Notifika__595D01C3706BE0DF");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("TipNotifikacijeId");

                    b.ToTable("Notifikacije");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Ocjene", b =>
                {
                    b.Property<int>("OcjenaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OcjenaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OcjenaId"));

                    b.Property<int?>("IdKnjiga")
                        .HasColumnType("int");

                    b.Property<int?>("IdKorisnik")
                        .HasColumnType("int");

                    b.Property<int>("IdKorisnikPosiljalac")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool>("TipOcjene")
                        .HasColumnType("bit");

                    b.HasKey("OcjenaId")
                        .HasName("PK__Ocjene__E6FC7B494960E30A");

                    b.HasIndex("IdKnjiga");

                    b.HasIndex("IdKorisnik");

                    b.HasIndex("IdKorisnikPosiljalac");

                    b.ToTable("Ocjene");
                });

            modelBuilder.Entity("eLibrary.Database.Models.TipNotifikacije", b =>
                {
                    b.Property<int>("TipNotifikacijeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TipNotifikacijeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipNotifikacijeId"));

                    b.Property<string>("NazivNotifikacije")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("TipNotifikacijeId")
                        .HasName("PK__TipNotif__A8350ACAF3315E83");

                    b.ToTable("TipNotifikacije");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Zanr", b =>
                {
                    b.Property<int>("ZanrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ZanrID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZanrId"));

                    b.Property<string>("NazivZanra")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("ZanrId")
                        .HasName("PK__Zanr__953868F360589D60");

                    b.ToTable("Zanr");
                });

            modelBuilder.Entity("eLibrary.Database.Models.ZanroviKnjiga", b =>
                {
                    b.Property<int>("ZanroviKnjigaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ZanroviKnjigaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZanroviKnjigaId"));

                    b.Property<int>("KnjigaId")
                        .HasColumnType("int")
                        .HasColumnName("KnjigaID");

                    b.Property<int>("ZanrId")
                        .HasColumnType("int")
                        .HasColumnName("ZanrID");

                    b.HasKey("ZanroviKnjigaId")
                        .HasName("PK__ZanroviK__1B7D23DBE4800B7D");

                    b.HasIndex("KnjigaId");

                    b.HasIndex("ZanrId");

                    b.ToTable("ZanroviKnjiga");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("eLibrary.Database.Models.Autor", b =>
                {
                    b.HasOne("eLibrary.Database.Models.Korisnik", "Korisnik")
                        .WithMany("Autors")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK__Autor__KorisnikI__2CF2ADDF");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eLibrary.Database.Models.FajloviKnjige", b =>
                {
                    b.HasOne("eLibrary.Database.Models.Knjiga", "IdKnjigaNavigation")
                        .WithMany("FajloviKnjiges")
                        .HasForeignKey("IdKnjiga")
                        .HasConstraintName("FK_FajloviKnjige_Knjiga");

                    b.Navigation("IdKnjigaNavigation");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Kartica", b =>
                {
                    b.HasOne("eLibrary.Database.Models.Korisnik", "Korisnik")
                        .WithMany("Karticas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Kartica_Korisnik");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Knjiga", b =>
                {
                    b.HasOne("eLibrary.Database.Models.Autor", "Autor")
                        .WithMany("Knjigas")
                        .HasForeignKey("AutorId")
                        .IsRequired()
                        .HasConstraintName("FK_Knjiga_Autor");

                    b.Navigation("Autor");
                });

            modelBuilder.Entity("eLibrary.Database.Models.KnjigaKorisnik", b =>
                {
                    b.HasOne("eLibrary.Database.Models.Knjiga", "Knjiga")
                        .WithMany("KnjigaKorisniks")
                        .HasForeignKey("KnjigaId")
                        .HasConstraintName("FK_KK_Knjiga");

                    b.HasOne("eLibrary.Database.Models.Korisnik", "Korisnik")
                        .WithMany("KnjigaKorisniks")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_KK_Korisnik");

                    b.Navigation("Knjiga");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Komentari", b =>
                {
                    b.HasOne("eLibrary.Database.Models.Knjiga", "Knjiga")
                        .WithMany("Komentaris")
                        .HasForeignKey("KnjigaId")
                        .HasConstraintName("FK_Komentar_Knjiga");

                    b.HasOne("eLibrary.Database.Models.Korisnik", "Korisnik")
                        .WithMany("Komentaris")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Komentar_Korisnik");

                    b.Navigation("Knjiga");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("eLibrary.Database.Models.KorisnikMedalja", b =>
                {
                    b.HasOne("eLibrary.Database.Models.Korisnik", "Korisnik")
                        .WithMany("KorisnikMedaljas")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_KorisnikMedalja_Korisnik");

                    b.HasOne("eLibrary.Database.Models.Medalja", "Medalja")
                        .WithMany("KorisnikMedaljas")
                        .HasForeignKey("MedaljaId")
                        .HasConstraintName("FK_KorisnikMedalja_Medalja");

                    b.Navigation("Korisnik");

                    b.Navigation("Medalja");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Notifikacije", b =>
                {
                    b.HasOne("eLibrary.Database.Models.Korisnik", "Korisnik")
                        .WithMany("Notifikacijes")
                        .HasForeignKey("KorisnikId")
                        .HasConstraintName("FK_Notifikacije_Korisnik");

                    b.HasOne("eLibrary.Database.Models.TipNotifikacije", "TipNotifikacije")
                        .WithMany("Notifikacijes")
                        .HasForeignKey("TipNotifikacijeId")
                        .IsRequired()
                        .HasConstraintName("FK_Notifikacije_TipNotifikacije");

                    b.Navigation("Korisnik");

                    b.Navigation("TipNotifikacije");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Ocjene", b =>
                {
                    b.HasOne("eLibrary.Database.Models.Knjiga", "IdKnjigaNavigation")
                        .WithMany("Ocjenes")
                        .HasForeignKey("IdKnjiga")
                        .HasConstraintName("FK__Ocjene__IdKnjiga__25518C17");

                    b.HasOne("eLibrary.Database.Models.Korisnik", "IdKorisnikNavigation")
                        .WithMany("OcjeneIdKorisnikNavigations")
                        .HasForeignKey("IdKorisnik")
                        .HasConstraintName("FK__Ocjene__IdKorisn__245D67DE");

                    b.HasOne("eLibrary.Database.Models.Korisnik", "IdKorisnikPosiljalacNavigation")
                        .WithMany("OcjeneIdKorisnikPosiljalacNavigations")
                        .HasForeignKey("IdKorisnikPosiljalac")
                        .IsRequired()
                        .HasConstraintName("FK__Ocjene__IdKorisn__2645B050");

                    b.Navigation("IdKnjigaNavigation");

                    b.Navigation("IdKorisnikNavigation");

                    b.Navigation("IdKorisnikPosiljalacNavigation");
                });

            modelBuilder.Entity("eLibrary.Database.Models.ZanroviKnjiga", b =>
                {
                    b.HasOne("eLibrary.Database.Models.Knjiga", "Knjiga")
                        .WithMany("ZanroviKnjigas")
                        .HasForeignKey("KnjigaId")
                        .IsRequired()
                        .HasConstraintName("FK__ZanroviKn__Knjig__123EB7A3");

                    b.HasOne("eLibrary.Database.Models.Zanr", "Zanr")
                        .WithMany("ZanroviKnjigas")
                        .HasForeignKey("ZanrId")
                        .IsRequired()
                        .HasConstraintName("FK__ZanroviKn__ZanrI__1332DBDC");

                    b.Navigation("Knjiga");

                    b.Navigation("Zanr");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Autor", b =>
                {
                    b.Navigation("Knjigas");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Knjiga", b =>
                {
                    b.Navigation("FajloviKnjiges");

                    b.Navigation("KnjigaKorisniks");

                    b.Navigation("Komentaris");

                    b.Navigation("Ocjenes");

                    b.Navigation("ZanroviKnjigas");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Korisnik", b =>
                {
                    b.Navigation("Autors");

                    b.Navigation("Karticas");

                    b.Navigation("KnjigaKorisniks");

                    b.Navigation("Komentaris");

                    b.Navigation("KorisnikMedaljas");

                    b.Navigation("Notifikacijes");

                    b.Navigation("OcjeneIdKorisnikNavigations");

                    b.Navigation("OcjeneIdKorisnikPosiljalacNavigations");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Medalja", b =>
                {
                    b.Navigation("KorisnikMedaljas");
                });

            modelBuilder.Entity("eLibrary.Database.Models.TipNotifikacije", b =>
                {
                    b.Navigation("Notifikacijes");
                });

            modelBuilder.Entity("eLibrary.Database.Models.Zanr", b =>
                {
                    b.Navigation("ZanroviKnjigas");
                });
#pragma warning restore 612, 618
        }
    }
}
